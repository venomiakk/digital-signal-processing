# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
from signals import SignalGenerator, SignalObject, SignalOperations
# from plots import plot_signal, plot_points
import os


class SignalProcessApp(object):
    def setupUi(self, SignalProcessApp):
        SignalProcessApp.setObjectName("SignalProcessApp")
        SignalProcessApp.resize(1715, 910)
        self.centralwidget = QtWidgets.QWidget(SignalProcessApp)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1701, 851))
        self.tabWidget.setObjectName("tabWidget")
        self.SignalTab = QtWidgets.QWidget()
        self.SignalTab.setObjectName("SignalTab")
        self.comboBoxSignals = QtWidgets.QComboBox(self.SignalTab)
        self.comboBoxSignals.setGeometry(QtCore.QRect(20, 40, 511, 22))
        self.comboBoxSignals.setObjectName("comboBoxSignals")
        self.comboBoxSignals.addItem("")
        self.comboBoxSignals.addItem("")
        self.comboBoxSignals.addItem("")
        self.comboBoxSignals.addItem("")
        self.comboBoxSignals.addItem("")
        self.comboBoxSignals.addItem("")
        self.comboBoxSignals.addItem("")
        self.comboBoxSignals.addItem("")
        self.comboBoxSignals.addItem("")
        self.comboBoxSignals.addItem("")
        self.comboBoxSignals.addItem("")
        self.sig_label1 = QtWidgets.QLabel(self.SignalTab)
        self.sig_label1.setGeometry(QtCore.QRect(20, 10, 141, 21))
        self.sig_label1.setObjectName("sig_label1")
        self.formLayoutWidget = QtWidgets.QWidget(self.SignalTab)
        self.formLayoutWidget.setGeometry(QtCore.QRect(20, 70, 511, 211))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.sig_formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.sig_formLayout.setContentsMargins(0, 0, 0, 0)
        self.sig_formLayout.setObjectName("sig_formLayout")
        self.amplitudaLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.amplitudaLabel.setObjectName("amplitudaLabel")
        self.sig_formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.amplitudaLabel)
        self.amplitudaLineEdit = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.amplitudaLineEdit.setObjectName("amplitudaLineEdit")
        self.sig_formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.amplitudaLineEdit)
        self.czasTrwaniaLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.czasTrwaniaLabel.setObjectName("czasTrwaniaLabel")
        self.sig_formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.czasTrwaniaLabel)
        self.czasTrwaniaLineEdit = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.czasTrwaniaLineEdit.setObjectName("czasTrwaniaLineEdit")
        self.sig_formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.czasTrwaniaLineEdit)
        self.przesuniecieLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.przesuniecieLabel.setObjectName("przesuniecieLabel")
        self.sig_formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.przesuniecieLabel)
        self.przesuniecieLineEdit = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.przesuniecieLineEdit.setObjectName("przesuniecieLineEdit")
        self.sig_formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.przesuniecieLineEdit)
        self.samplingrateLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.samplingrateLabel.setObjectName("samplingrateLabel")
        self.sig_formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.samplingrateLabel)
        self.samplingrateLineEdit = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.samplingrateLineEdit.setObjectName("samplingrateLineEdit")
        self.sig_formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.samplingrateLineEdit)
        self.okresLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.okresLabel.setObjectName("okresLabel")
        self.sig_formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.okresLabel)
        self.okresLineEdit = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.okresLineEdit.setObjectName("okresLineEdit")
        self.sig_formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.okresLineEdit)
        self.wypelnienieLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.wypelnienieLabel.setObjectName("wypelnienieLabel")
        self.sig_formLayout.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.wypelnienieLabel)
        self.wypelnienieLineEdit = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.wypelnienieLineEdit.setObjectName("wypelnienieLineEdit")
        self.sig_formLayout.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.wypelnienieLineEdit)
        self.numerProbkiLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.numerProbkiLabel.setObjectName("numerProbkiLabel")
        self.sig_formLayout.setWidget(6, QtWidgets.QFormLayout.LabelRole, self.numerProbkiLabel)
        self.numerProbkiLineEdit = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.numerProbkiLineEdit.setObjectName("numerProbkiLineEdit")
        self.sig_formLayout.setWidget(6, QtWidgets.QFormLayout.FieldRole, self.numerProbkiLineEdit)
        self.prawdopodobienstwoLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.prawdopodobienstwoLabel.setObjectName("prawdopodobienstwoLabel")
        self.sig_formLayout.setWidget(7, QtWidgets.QFormLayout.LabelRole, self.prawdopodobienstwoLabel)
        self.prawdopodobienstwoLineEdit = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.prawdopodobienstwoLineEdit.setObjectName("prawdopodobienstwoLineEdit")
        self.sig_formLayout.setWidget(7, QtWidgets.QFormLayout.FieldRole, self.prawdopodobienstwoLineEdit)
        self.sig_generate = QtWidgets.QPushButton(self.SignalTab)
        self.sig_generate.setGeometry(QtCore.QRect(20, 300, 111, 23))
        self.sig_generate.setObjectName("sig_generate")
        self.sig_save = QtWidgets.QPushButton(self.SignalTab)
        self.sig_save.setGeometry(QtCore.QRect(140, 300, 91, 23))
        self.sig_save.setObjectName("sig_save")
        self.sig_readfile = QtWidgets.QPushButton(self.SignalTab)
        self.sig_readfile.setGeometry(QtCore.QRect(240, 300, 91, 23))
        self.sig_readfile.setObjectName("sig_readfile")
        self.sig_label2 = QtWidgets.QLabel(self.SignalTab)
        self.sig_label2.setGeometry(QtCore.QRect(20, 330, 151, 21))
        self.sig_label2.setObjectName("sig_label2")
        self.sig_histbin = QtWidgets.QLineEdit(self.SignalTab)
        self.sig_histbin.setGeometry(QtCore.QRect(180, 330, 113, 20))
        self.sig_histbin.setObjectName("sig_histbin")
        self.sig_plotframe = QtWidgets.QFrame(self.SignalTab)
        self.sig_plotframe.setGeometry(QtCore.QRect(20, 380, 1661, 411))
        self.sig_plotframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.sig_plotframe.setFrameShadow(QtWidgets.QFrame.Raised)
        self.sig_plotframe.setObjectName("sig_plotframe")
        self.tabWidget.addTab(self.SignalTab, "")
        self.OperationsTab = QtWidgets.QWidget()
        self.OperationsTab.setObjectName("OperationsTab")
        self.formLayoutWidget_2 = QtWidgets.QWidget(self.OperationsTab)
        self.formLayoutWidget_2.setGeometry(QtCore.QRect(20, 150, 261, 131))
        self.formLayoutWidget_2.setObjectName("formLayoutWidget_2")
        self.op_formLayout_2 = QtWidgets.QFormLayout(self.formLayoutWidget_2)
        self.op_formLayout_2.setContentsMargins(0, 0, 0, 0)
        self.op_formLayout_2.setObjectName("op_formLayout_2")
        self.amplitudaLabel_2 = QtWidgets.QLabel(self.formLayoutWidget_2)
        self.amplitudaLabel_2.setObjectName("amplitudaLabel_2")
        self.op_formLayout_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.amplitudaLabel_2)
        self.amplitudaLineEdit_2 = QtWidgets.QLineEdit(self.formLayoutWidget_2)
        self.amplitudaLineEdit_2.setObjectName("amplitudaLineEdit_2")
        self.op_formLayout_2.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.amplitudaLineEdit_2)
        self.okresLabel_2 = QtWidgets.QLabel(self.formLayoutWidget_2)
        self.okresLabel_2.setObjectName("okresLabel_2")
        self.op_formLayout_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.okresLabel_2)
        self.okresLineEdit_2 = QtWidgets.QLineEdit(self.formLayoutWidget_2)
        self.okresLineEdit_2.setObjectName("okresLineEdit_2")
        self.op_formLayout_2.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.okresLineEdit_2)
        self.wypelnienieLabel_2 = QtWidgets.QLabel(self.formLayoutWidget_2)
        self.wypelnienieLabel_2.setObjectName("wypelnienieLabel_2")
        self.op_formLayout_2.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.wypelnienieLabel_2)
        self.wypelnienieLineEdit_2 = QtWidgets.QLineEdit(self.formLayoutWidget_2)
        self.wypelnienieLineEdit_2.setObjectName("wypelnienieLineEdit_2")
        self.op_formLayout_2.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.wypelnienieLineEdit_2)
        self.numerProbkiLabel_2 = QtWidgets.QLabel(self.formLayoutWidget_2)
        self.numerProbkiLabel_2.setObjectName("numerProbkiLabel_2")
        self.op_formLayout_2.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.numerProbkiLabel_2)
        self.numerProbkiLineEdit_2 = QtWidgets.QLineEdit(self.formLayoutWidget_2)
        self.numerProbkiLineEdit_2.setObjectName("numerProbkiLineEdit_2")
        self.op_formLayout_2.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.numerProbkiLineEdit_2)
        self.prawdopodobienstwoLabel_2 = QtWidgets.QLabel(self.formLayoutWidget_2)
        self.prawdopodobienstwoLabel_2.setObjectName("prawdopodobienstwoLabel_2")
        self.op_formLayout_2.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.prawdopodobienstwoLabel_2)
        self.prawdopodobienstwoLineEdit_2 = QtWidgets.QLineEdit(self.formLayoutWidget_2)
        self.prawdopodobienstwoLineEdit_2.setObjectName("prawdopodobienstwoLineEdit_2")
        self.op_formLayout_2.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.prawdopodobienstwoLineEdit_2)
        self.comboBoxSignals_2 = QtWidgets.QComboBox(self.OperationsTab)
        self.comboBoxSignals_2.setGeometry(QtCore.QRect(20, 110, 381, 22))
        self.comboBoxSignals_2.setObjectName("comboBoxSignals_2")
        self.comboBoxSignals_2.addItem("")
        self.comboBoxSignals_2.addItem("")
        self.comboBoxSignals_2.addItem("")
        self.comboBoxSignals_2.addItem("")
        self.comboBoxSignals_2.addItem("")
        self.comboBoxSignals_2.addItem("")
        self.comboBoxSignals_2.addItem("")
        self.comboBoxSignals_2.addItem("")
        self.comboBoxSignals_2.addItem("")
        self.comboBoxSignals_2.addItem("")
        self.comboBoxSignals_2.addItem("")
        self.comboBoxSignals_3 = QtWidgets.QComboBox(self.OperationsTab)
        self.comboBoxSignals_3.setGeometry(QtCore.QRect(20, 350, 391, 22))
        self.comboBoxSignals_3.setObjectName("comboBoxSignals_3")
        self.comboBoxSignals_3.addItem("")
        self.comboBoxSignals_3.addItem("")
        self.comboBoxSignals_3.addItem("")
        self.comboBoxSignals_3.addItem("")
        self.comboBoxSignals_3.addItem("")
        self.comboBoxSignals_3.addItem("")
        self.comboBoxSignals_3.addItem("")
        self.comboBoxSignals_3.addItem("")
        self.comboBoxSignals_3.addItem("")
        self.comboBoxSignals_3.addItem("")
        self.comboBoxSignals_3.addItem("")
        self.op_label1 = QtWidgets.QLabel(self.OperationsTab)
        self.op_label1.setGeometry(QtCore.QRect(70, 660, 47, 13))
        self.op_label1.setObjectName("op_label1")
        self.comboBox = QtWidgets.QComboBox(self.OperationsTab)
        self.comboBox.setGeometry(QtCore.QRect(40, 690, 101, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.op_executeop = QtWidgets.QPushButton(self.OperationsTab)
        self.op_executeop.setGeometry(QtCore.QRect(40, 720, 101, 23))
        self.op_executeop.setObjectName("op_executeop")
        self.op_saveop = QtWidgets.QPushButton(self.OperationsTab)
        self.op_saveop.setGeometry(QtCore.QRect(40, 750, 101, 23))
        self.op_saveop.setObjectName("op_saveop")
        self.op_generate_2 = QtWidgets.QPushButton(self.OperationsTab)
        self.op_generate_2.setGeometry(QtCore.QRect(290, 150, 111, 23))
        self.op_generate_2.setObjectName("op_generate_2")
        self.op_readfile_2 = QtWidgets.QPushButton(self.OperationsTab)
        self.op_readfile_2.setGeometry(QtCore.QRect(290, 250, 111, 23))
        self.op_readfile_2.setObjectName("op_readfile_2")
        self.op_save_2 = QtWidgets.QPushButton(self.OperationsTab)
        self.op_save_2.setGeometry(QtCore.QRect(290, 200, 111, 23))
        self.op_save_2.setObjectName("op_save_2")
        self.op_generate_3 = QtWidgets.QPushButton(self.OperationsTab)
        self.op_generate_3.setGeometry(QtCore.QRect(300, 390, 111, 23))
        self.op_generate_3.setObjectName("op_generate_3")
        self.op_readfile_3 = QtWidgets.QPushButton(self.OperationsTab)
        self.op_readfile_3.setGeometry(QtCore.QRect(300, 490, 111, 23))
        self.op_readfile_3.setObjectName("op_readfile_3")
        self.op_save_3 = QtWidgets.QPushButton(self.OperationsTab)
        self.op_save_3.setGeometry(QtCore.QRect(300, 440, 111, 23))
        self.op_save_3.setObjectName("op_save_3")
        self.op_framesig1 = QtWidgets.QFrame(self.OperationsTab)
        self.op_framesig1.setGeometry(QtCore.QRect(420, 10, 1261, 271))
        self.op_framesig1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.op_framesig1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.op_framesig1.setObjectName("op_framesig1")
        self.formLayoutWidget_3 = QtWidgets.QWidget(self.OperationsTab)
        self.formLayoutWidget_3.setGeometry(QtCore.QRect(20, 390, 261, 131))
        self.formLayoutWidget_3.setObjectName("formLayoutWidget_3")
        self.op_formLayout_3 = QtWidgets.QFormLayout(self.formLayoutWidget_3)
        self.op_formLayout_3.setContentsMargins(0, 0, 0, 0)
        self.op_formLayout_3.setObjectName("op_formLayout_3")
        self.amplitudaLabel_3 = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.amplitudaLabel_3.setObjectName("amplitudaLabel_3")
        self.op_formLayout_3.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.amplitudaLabel_3)
        self.amplitudaLineEdit_3 = QtWidgets.QLineEdit(self.formLayoutWidget_3)
        self.amplitudaLineEdit_3.setObjectName("amplitudaLineEdit_3")
        self.op_formLayout_3.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.amplitudaLineEdit_3)
        self.okresLabel_3 = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.okresLabel_3.setObjectName("okresLabel_3")
        self.op_formLayout_3.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.okresLabel_3)
        self.okresLineEdit_3 = QtWidgets.QLineEdit(self.formLayoutWidget_3)
        self.okresLineEdit_3.setObjectName("okresLineEdit_3")
        self.op_formLayout_3.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.okresLineEdit_3)
        self.wypelnienieLabel_3 = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.wypelnienieLabel_3.setObjectName("wypelnienieLabel_3")
        self.op_formLayout_3.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.wypelnienieLabel_3)
        self.wypelnienieLineEdit_3 = QtWidgets.QLineEdit(self.formLayoutWidget_3)
        self.wypelnienieLineEdit_3.setObjectName("wypelnienieLineEdit_3")
        self.op_formLayout_3.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.wypelnienieLineEdit_3)
        self.numerProbkiLabel_3 = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.numerProbkiLabel_3.setObjectName("numerProbkiLabel_3")
        self.op_formLayout_3.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.numerProbkiLabel_3)
        self.numerProbkiLineEdit_3 = QtWidgets.QLineEdit(self.formLayoutWidget_3)
        self.numerProbkiLineEdit_3.setObjectName("numerProbkiLineEdit_3")
        self.op_formLayout_3.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.numerProbkiLineEdit_3)
        self.prawdopodobienstwoLabel_3 = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.prawdopodobienstwoLabel_3.setObjectName("prawdopodobienstwoLabel_3")
        self.op_formLayout_3.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.prawdopodobienstwoLabel_3)
        self.prawdopodobienstwoLineEdit_3 = QtWidgets.QLineEdit(self.formLayoutWidget_3)
        self.prawdopodobienstwoLineEdit_3.setObjectName("prawdopodobienstwoLineEdit_3")
        self.op_formLayout_3.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.prawdopodobienstwoLineEdit_3)
        self.op_framesig2 = QtWidgets.QFrame(self.OperationsTab)
        self.op_framesig2.setGeometry(QtCore.QRect(420, 280, 1261, 271))
        self.op_framesig2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.op_framesig2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.op_framesig2.setObjectName("op_framesig2")
        self.op_frameop = QtWidgets.QFrame(self.OperationsTab)
        self.op_frameop.setGeometry(QtCore.QRect(150, 550, 1531, 271))
        self.op_frameop.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.op_frameop.setFrameShadow(QtWidgets.QFrame.Raised)
        self.op_frameop.setObjectName("op_frameop")
        self.formLayoutWidget_4 = QtWidgets.QWidget(self.OperationsTab)
        self.formLayoutWidget_4.setGeometry(QtCore.QRect(20, 10, 371, 81))
        self.formLayoutWidget_4.setObjectName("formLayoutWidget_4")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget_4)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")
        self.op_czasTrwaniaLabel1 = QtWidgets.QLabel(self.formLayoutWidget_4)
        self.op_czasTrwaniaLabel1.setObjectName("op_czasTrwaniaLabel1")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.op_czasTrwaniaLabel1)
        self.op_czasTrwaniaLineEdit1 = QtWidgets.QLineEdit(self.formLayoutWidget_4)
        self.op_czasTrwaniaLineEdit1.setObjectName("op_czasTrwaniaLineEdit1")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.op_czasTrwaniaLineEdit1)
        self.op_przesuniecieLabel1 = QtWidgets.QLabel(self.formLayoutWidget_4)
        self.op_przesuniecieLabel1.setObjectName("op_przesuniecieLabel1")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.op_przesuniecieLabel1)
        self.op_przesuniecieLineEdit1 = QtWidgets.QLineEdit(self.formLayoutWidget_4)
        self.op_przesuniecieLineEdit1.setObjectName("op_przesuniecieLineEdit1")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.op_przesuniecieLineEdit1)
        self.op_samplingrateLabel1 = QtWidgets.QLabel(self.formLayoutWidget_4)
        self.op_samplingrateLabel1.setObjectName("op_samplingrateLabel1")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.op_samplingrateLabel1)
        self.op_samplingrateLineEdit1 = QtWidgets.QLineEdit(self.formLayoutWidget_4)
        self.op_samplingrateLineEdit1.setObjectName("op_samplingrateLineEdit1")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.op_samplingrateLineEdit1)
        self.tabWidget.addTab(self.OperationsTab, "")
        self.FileTab = QtWidgets.QWidget()
        self.FileTab.setObjectName("FileTab")
        self.f_loadfile = QtWidgets.QPushButton(self.FileTab)
        self.f_loadfile.setGeometry(QtCore.QRect(20, 20, 131, 23))
        self.f_loadfile.setObjectName("f_loadfile")
        self.f_label1 = QtWidgets.QLabel(self.FileTab)
        self.f_label1.setGeometry(QtCore.QRect(30, 60, 121, 16))
        self.f_label1.setObjectName("f_label1")
        self.f_label2 = QtWidgets.QLabel(self.FileTab)
        self.f_label2.setGeometry(QtCore.QRect(440, 60, 121, 16))
        self.f_label2.setObjectName("f_label2")
        self.f_label3 = QtWidgets.QLabel(self.FileTab)
        self.f_label3.setGeometry(QtCore.QRect(20, 380, 151, 21))
        self.f_label3.setObjectName("f_label3")
        self.f_histbin = QtWidgets.QLineEdit(self.FileTab)
        self.f_histbin.setGeometry(QtCore.QRect(180, 380, 113, 20))
        self.f_histbin.setObjectName("f_histbin")
        self.f_refreshplot = QtWidgets.QPushButton(self.FileTab)
        self.f_refreshplot.setGeometry(QtCore.QRect(310, 380, 131, 23))
        self.f_refreshplot.setObjectName("f_refreshplot")
        self.f_frame = QtWidgets.QFrame(self.FileTab)
        self.f_frame.setGeometry(QtCore.QRect(20, 420, 1571, 391))
        self.f_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.f_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.f_frame.setObjectName("f_frame")
        self.f_sigattr = QtWidgets.QTableWidget(self.FileTab)
        self.f_sigattr.setGeometry(QtCore.QRect(10, 90, 391, 241))
        self.f_sigattr.setObjectName("f_sigattr")
        self.f_sigattr.setColumnCount(2)
        self.f_sigattr.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.f_sigattr.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.f_sigattr.setHorizontalHeaderItem(1, item)
        self.f_sigvalues = QtWidgets.QTableWidget(self.FileTab)
        self.f_sigvalues.setGeometry(QtCore.QRect(440, 90, 391, 241))
        self.f_sigvalues.setObjectName("f_sigvalues")
        self.f_sigvalues.setColumnCount(3)
        self.f_sigvalues.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.f_sigvalues.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.f_sigvalues.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.f_sigvalues.setHorizontalHeaderItem(2, item)
        self.tabWidget.addTab(self.FileTab, "")
        SignalProcessApp.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(SignalProcessApp)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1715, 21))
        self.menubar.setObjectName("menubar")
        SignalProcessApp.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(SignalProcessApp)
        self.statusbar.setObjectName("statusbar")
        SignalProcessApp.setStatusBar(self.statusbar)

        #! CONTROLS
        self.sig_generate.clicked.connect(self.generate_and_plot_signal)
        self.sig_save.clicked.connect(self.save_signal)
        self.sig_readfile.clicked.connect(self.load_signal_from_file)
        
        self.op_generate_2.clicked.connect(self.generate_and_plot_signal1)
        self.op_save_2.clicked.connect(self.save_signal1)
        self.op_readfile_2.clicked.connect(self.load_signal1)
        
        self.op_generate_3.clicked.connect(self.generate_and_plot_signal2)
        self.op_save_3.clicked.connect(self.save_signal2)
        self.op_readfile_3.clicked.connect(self.load_signal2)
        
        self.op_executeop.clicked.connect(self.execute_operation)
        self.op_saveop.clicked.connect(self.save_operation_result)
        
        self.comboBoxSignals.currentIndexChanged.connect(self.update_enabled_fields)
        self.comboBoxSignals_2.currentIndexChanged.connect(self.update_enabled_fields_signal1)
        self.comboBoxSignals_3.currentIndexChanged.connect(self.update_enabled_fields_signal2)
        
        self.setup_plot_frame()
        self.setup_operations_frames()
        
        self.retranslateUi(SignalProcessApp)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(SignalProcessApp)
        
        #! CONTROLS
        self.update_enabled_fields()
        self.update_enabled_fields_signal1()
        self.update_enabled_fields_signal2()

        self.set_default_values()

        self.f_loadfile.clicked.connect(self.load_file_signal)
        self.f_refreshplot.clicked.connect(self.refresh_file_plot)

        self.setup_file_frame()

    def retranslateUi(self, SignalProcessApp):
        _translate = QtCore.QCoreApplication.translate
        SignalProcessApp.setWindowTitle(_translate("SignalProcessApp", "MainWindow"))
        self.comboBoxSignals.setItemText(0, _translate("SignalProcessApp", "Szum o rozkładzie jednostajnym"))
        self.comboBoxSignals.setItemText(1, _translate("SignalProcessApp", "Szum gaussowski"))
        self.comboBoxSignals.setItemText(2, _translate("SignalProcessApp", "Sygnał sinusoidalny"))
        self.comboBoxSignals.setItemText(3, _translate("SignalProcessApp", "Sygnał sinusoidalny wyprostowany jednopołówkowo"))
        self.comboBoxSignals.setItemText(4, _translate("SignalProcessApp", "Sygnał sinusoidalny wyprostowany dwupołówkowo"))
        self.comboBoxSignals.setItemText(5, _translate("SignalProcessApp", "Sygnał prostokątny"))
        self.comboBoxSignals.setItemText(6, _translate("SignalProcessApp", "Sygnał prostokątny symetryczny"))
        self.comboBoxSignals.setItemText(7, _translate("SignalProcessApp", "Sygnał trójkątny"))
        self.comboBoxSignals.setItemText(8, _translate("SignalProcessApp", "Skok jednostkowy"))
        self.comboBoxSignals.setItemText(9, _translate("SignalProcessApp", "Impuls jednostkowy"))
        self.comboBoxSignals.setItemText(10, _translate("SignalProcessApp", "Szum impulsowy"))
        self.sig_label1.setText(_translate("SignalProcessApp", "Rodzaj sygnału"))
        self.amplitudaLabel.setText(_translate("SignalProcessApp", "Amplituda"))
        self.czasTrwaniaLabel.setText(_translate("SignalProcessApp", "Czas trwania [s]"))
        self.przesuniecieLabel.setText(_translate("SignalProcessApp", "Przesunięcie [s]"))
        self.samplingrateLabel.setText(_translate("SignalProcessApp", "Próbkowanie [próbki/s]"))
        self.okresLabel.setText(_translate("SignalProcessApp", "Okres [s]"))
        self.wypelnienieLabel.setText(_translate("SignalProcessApp", "Współczynnik wypełnienia"))
        self.numerProbkiLabel.setText(_translate("SignalProcessApp", "Numer próbki"))
        self.prawdopodobienstwoLabel.setText(_translate("SignalProcessApp", "Prawdopodobieństwo"))
        self.sig_generate.setText(_translate("SignalProcessApp", "Wygeneruj sygnał"))
        self.sig_save.setText(_translate("SignalProcessApp", "Zapisz sygnał"))
        self.sig_readfile.setText(_translate("SignalProcessApp", "Wczytaj z pliku"))
        self.sig_label2.setText(_translate("SignalProcessApp", "Liczba przediałów histogramu"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.SignalTab), _translate("SignalProcessApp", "Sygnał"))
        self.amplitudaLabel_2.setText(_translate("SignalProcessApp", "Amplituda"))
        self.okresLabel_2.setText(_translate("SignalProcessApp", "Okres [s]"))
        self.wypelnienieLabel_2.setText(_translate("SignalProcessApp", "Współczynnik wypełnienia"))
        self.numerProbkiLabel_2.setText(_translate("SignalProcessApp", "Numer próbki"))
        self.prawdopodobienstwoLabel_2.setText(_translate("SignalProcessApp", "Prawdopodobieństwo"))
        self.comboBoxSignals_2.setItemText(0, _translate("SignalProcessApp", "Szum o rozkładzie jednostajnym"))
        self.comboBoxSignals_2.setItemText(1, _translate("SignalProcessApp", "Szum gaussowski"))
        self.comboBoxSignals_2.setItemText(2, _translate("SignalProcessApp", "Sygnał sinusoidalny"))
        self.comboBoxSignals_2.setItemText(3, _translate("SignalProcessApp", "Sygnał sinusoidalny wyprostowany jednopołówkowo"))
        self.comboBoxSignals_2.setItemText(4, _translate("SignalProcessApp", "Sygnał sinusoidalny wyprostowany dwupołówkowo"))
        self.comboBoxSignals_2.setItemText(5, _translate("SignalProcessApp", "Sygnał prostokątny"))
        self.comboBoxSignals_2.setItemText(6, _translate("SignalProcessApp", "Sygnał prostokątny symetryczny"))
        self.comboBoxSignals_2.setItemText(7, _translate("SignalProcessApp", "Sygnał trójkątny"))
        self.comboBoxSignals_2.setItemText(8, _translate("SignalProcessApp", "Skok jednostkowy"))
        self.comboBoxSignals_2.setItemText(9, _translate("SignalProcessApp", "Impuls jednostkowy"))
        self.comboBoxSignals_2.setItemText(10, _translate("SignalProcessApp", "Szum impulsowy"))
        self.comboBoxSignals_3.setItemText(0, _translate("SignalProcessApp", "Szum o rozkładzie jednostajnym"))
        self.comboBoxSignals_3.setItemText(1, _translate("SignalProcessApp", "Szum gaussowski"))
        self.comboBoxSignals_3.setItemText(2, _translate("SignalProcessApp", "Sygnał sinusoidalny"))
        self.comboBoxSignals_3.setItemText(3, _translate("SignalProcessApp", "Sygnał sinusoidalny wyprostowany jednopołówkowo"))
        self.comboBoxSignals_3.setItemText(4, _translate("SignalProcessApp", "Sygnał sinusoidalny wyprostowany dwupołówkowo"))
        self.comboBoxSignals_3.setItemText(5, _translate("SignalProcessApp", "Sygnał prostokątny"))
        self.comboBoxSignals_3.setItemText(6, _translate("SignalProcessApp", "Sygnał prostokątny symetryczny"))
        self.comboBoxSignals_3.setItemText(7, _translate("SignalProcessApp", "Sygnał trójkątny"))
        self.comboBoxSignals_3.setItemText(8, _translate("SignalProcessApp", "Skok jednostkowy"))
        self.comboBoxSignals_3.setItemText(9, _translate("SignalProcessApp", "Impuls jednostkowy"))
        self.comboBoxSignals_3.setItemText(10, _translate("SignalProcessApp", "Szum impulsowy"))
        self.op_label1.setText(_translate("SignalProcessApp", "Operacja"))
        self.comboBox.setItemText(0, _translate("SignalProcessApp", "Dodawanie"))
        self.comboBox.setItemText(1, _translate("SignalProcessApp", "Odejmowanie"))
        self.comboBox.setItemText(2, _translate("SignalProcessApp", "Mnożenie"))
        self.comboBox.setItemText(3, _translate("SignalProcessApp", "Dzielenie"))
        self.op_executeop.setText(_translate("SignalProcessApp", "Wykonaj operacje"))
        self.op_saveop.setText(_translate("SignalProcessApp", "Zapisz wynik"))
        self.op_generate_2.setText(_translate("SignalProcessApp", "Wygeneruj sygnał"))
        self.op_readfile_2.setText(_translate("SignalProcessApp", "Wczytaj z pliku"))
        self.op_save_2.setText(_translate("SignalProcessApp", "Zapisz sygnał"))
        self.op_generate_3.setText(_translate("SignalProcessApp", "Wygeneruj sygnał"))
        self.op_readfile_3.setText(_translate("SignalProcessApp", "Wczytaj z pliku"))
        self.op_save_3.setText(_translate("SignalProcessApp", "Zapisz sygnał"))
        self.amplitudaLabel_3.setText(_translate("SignalProcessApp", "Amplituda"))
        self.okresLabel_3.setText(_translate("SignalProcessApp", "Okres [s]"))
        self.wypelnienieLabel_3.setText(_translate("SignalProcessApp", "Współczynnik wypełnienia"))
        self.numerProbkiLabel_3.setText(_translate("SignalProcessApp", "Numer próbki"))
        self.prawdopodobienstwoLabel_3.setText(_translate("SignalProcessApp", "Prawdopodobieństwo"))
        self.op_czasTrwaniaLabel1.setText(_translate("SignalProcessApp", "Czas trwania [s]"))
        self.op_przesuniecieLabel1.setText(_translate("SignalProcessApp", "Przesunięcie [s]"))
        self.op_samplingrateLabel1.setText(_translate("SignalProcessApp", "Próbkowanie [próbki/s]"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.OperationsTab), _translate("SignalProcessApp", "Operacje"))
        self.f_loadfile.setText(_translate("SignalProcessApp", "Wczytaj sygnał z pliku"))
        self.f_label1.setText(_translate("SignalProcessApp", "Atrybuty sygnału"))
        self.f_label2.setText(_translate("SignalProcessApp", "Wartości sygnału"))
        self.f_label3.setText(_translate("SignalProcessApp", "Liczba przediałów histogramu"))
        self.f_refreshplot.setText(_translate("SignalProcessApp", "Odśwież wykres"))
        item = self.f_sigattr.horizontalHeaderItem(0)
        item.setText(_translate("SignalProcessApp", "Atrybut"))
        item = self.f_sigattr.horizontalHeaderItem(1)
        item.setText(_translate("SignalProcessApp", "Wartość"))
        item = self.f_sigvalues.horizontalHeaderItem(0)
        item.setText(_translate("SignalProcessApp", "Indeks"))
        item = self.f_sigvalues.horizontalHeaderItem(1)
        item.setText(_translate("SignalProcessApp", "Czas [s]"))
        item = self.f_sigvalues.horizontalHeaderItem(2)
        item.setText(_translate("SignalProcessApp", "Wartość"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.FileTab), _translate("SignalProcessApp", "Pliki"))
    
    def setup_plot_frame(self):
        self.sig_plot_layout = QtWidgets.QVBoxLayout(self.sig_plotframe)

        self.figure = Figure(figsize=(9, 4))

        self.canvas = FigureCanvas(self.figure)
        self.sig_plot_layout.addWidget(self.canvas)
        
        self.figure.clear()
        self.canvas.draw()

        self.current_signal = None

    def generate_and_plot_signal(self):
        signal_type = self.comboBoxSignals.currentText()

        try:
            amplitude = float(self.amplitudaLineEdit.text()) if self.amplitudaLineEdit.text() else 1
            duration = float(self.czasTrwaniaLineEdit.text()) if self.czasTrwaniaLineEdit.text() else 2
            t_shift = float(self.przesuniecieLineEdit.text()) if self.przesuniecieLineEdit.text() else 0
            sampling_rate = float(self.samplingrateLineEdit.text()) if self.samplingrateLineEdit.text() else 1000
            period = float(self.okresLineEdit.text()) if self.okresLineEdit.text() else 1
            fill_factor = float(self.wypelnienieLineEdit.text()) if self.wypelnienieLineEdit.text() else 0.5
            sample_num = int(self.numerProbkiLineEdit.text()) if self.numerProbkiLineEdit.text() else 10
            probability = float(self.prawdopodobienstwoLineEdit.text()) if self.prawdopodobienstwoLineEdit.text() else 0.5
        except ValueError:
            QtWidgets.QMessageBox.critical(None, "Błąd", "Wprowadź poprawne wartości numeryczne.")
            return

        try:
            bins = int(self.sig_histbin.text()) if self.sig_histbin.text() else 20
        except ValueError:
            bins = 20

        if signal_type == "Szum o rozkładzie jednostajnym":
            signal_obj = SignalGenerator.uniformly_distributed_noise(A=amplitude, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Szum gaussowski":
            signal_obj = SignalGenerator.gaussian_noise(A=amplitude, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał sinusoidalny":
            signal_obj = SignalGenerator.sin_signal(A=amplitude, T=period, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał sinusoidalny wyprostowany jednopołówkowo":
            signal_obj = SignalGenerator.sin_half_signal(A=amplitude, T=period, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał sinusoidalny wyprostowany dwupołówkowo":
            signal_obj = SignalGenerator.sin_twohalf_signal(A=amplitude, T=period, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał prostokątny":
            signal_obj = SignalGenerator.square_signal(A=amplitude, T=period, kw=fill_factor, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał prostokątny symetryczny":
            signal_obj = SignalGenerator.square_symmetric_signal(A=amplitude, T=period, kw=fill_factor, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał trójkątny":
            signal_obj = SignalGenerator.triangle_signal(A=amplitude, T=period, t_start=t_shift, d=duration, kw=fill_factor, sampling_rate=sampling_rate)
        elif signal_type == "Skok jednostkowy":
            signal_obj = SignalGenerator.step_signal(A=amplitude, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Impuls jednostkowy":
            signal_obj = SignalGenerator.unit_impulse(A=amplitude, n_start=t_shift, n_spike=sample_num, sampling_rate=sampling_rate, d=duration)
        elif signal_type == "Szum impulsowy":
            signal_obj = SignalGenerator.impulse_noise(A=amplitude, t_start=t_shift, d=duration, sampling_rate=sampling_rate, p=probability)
        
        self.current_signal = signal_obj

        self.plot_signal(signal_obj, bins)

    def plot_signal(self, signal_obj, bins=20):
        if not signal_obj:
            return

        self.figure.clear()

        from matplotlib import gridspec
        gs = gridspec.GridSpec(1, 3, width_ratios=[3, 3, 0.5])

        ax1 = self.figure.add_subplot(gs[0])
        ax2 = self.figure.add_subplot(gs[1])

        ax1.grid(True)
        ax1.axhline(y=0, color='k', linewidth=1.5, alpha=0.3)
        
        if signal_obj.discrete_signal:
            ax1.scatter(signal_obj.time, signal_obj.signal)
        else:
            ax1.plot(signal_obj.time, signal_obj.signal)
        
        ax1.set_xlabel("Czas [s]")
        ax1.set_ylabel("Amplituda")
        ax1.set_title("Sygnał")

        ax2.hist(signal_obj.signal, bins=bins)
        ax2.set_title("Histogram")
        ax2.set_xlabel("Amplituda")
        ax2.set_ylabel("Częstość")

        stats_text = "Statystyki sygnału:\n\n"
        stats_text += f"Wartość średnia:\n{signal_obj.mean_value:.4f}\n\n"
        stats_text += f"Średnia wartość bezwzględna:\n{signal_obj.abs_mean_value:.4f}\n\n"
        stats_text += f"Wartość skuteczna (RMS):\n{signal_obj.rms_value:.4f}\n\n"
        stats_text += f"Wariancja:\n{signal_obj.variance:.4f}\n\n"
        stats_text += f"Średnia moc sygnału:\n{signal_obj.avg_power:.4f}"
        
        stats_ax = self.figure.add_subplot(gs[2])
        stats_ax.axis('off')
        stats_ax.text(0.05, 0.5, stats_text, 
                    va='center', ha='left',
                    bbox=dict(boxstyle='round', facecolor='whitesmoke', alpha=0.5))
        
        self.figure.tight_layout()
        self.canvas.draw()

    def save_signal(self):
        if not hasattr(self, 'current_signal') or self.current_signal is None:
            QtWidgets.QMessageBox.warning(None, "Ostrzeżenie", "Brak sygnału do zapisania.")
            return

        options = QtWidgets.QFileDialog.Options()
        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(
            None, "Zapisz sygnał", "", "Pickle Files (*.pkl);;All Files (*)", 
            options=options
        )
        
        if file_path:
            if not file_path.endswith('.pkl'):
                file_path += '.pkl'

            import pickle
            try:
                with open(file_path, 'wb') as f:
                    pickle.dump(self.current_signal, f)
                QtWidgets.QMessageBox.information(None, "Sukces", f"Sygnał zapisany do {file_path}")
            except Exception as e:
                QtWidgets.QMessageBox.critical(None, "Błąd", f"Nie udało się zapisać pliku: {str(e)}")

    def load_signal_from_file(self):
        options = QtWidgets.QFileDialog.Options()
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            None, "Wczytaj sygnał", "", "Pickle Files (*.pkl);;All Files (*)", 
            options=options
        )
        
        if file_path:
            import pickle
            try:
                with open(file_path, 'rb') as f:
                    signal_obj = pickle.load(f)

                if not isinstance(signal_obj, SignalObject):
                    QtWidgets.QMessageBox.critical(None, "Błąd", "Plik nie zawiera obiektu sygnału.")
                    return

                self.current_signal = signal_obj

                try:
                    bins = int(self.sig_histbin.text()) if self.sig_histbin.text() else 20
                except ValueError:
                    bins = 20

                self.plot_signal(signal_obj, bins)
                
                QtWidgets.QMessageBox.information(None, "Sukces", f"Sygnał wczytany z {file_path}")
            except Exception as e:
                QtWidgets.QMessageBox.critical(None, "Błąd", f"Nie udało się wczytać pliku: {str(e)}")

    def update_enabled_fields(self):
        signal_type = self.comboBoxSignals.currentText()

        param_mapping = {
            "Szum o rozkładzie jednostajnym": ["amplituda", "czasTrwania", "przesuniecie", "samplingrate"],
            "Szum gaussowski": ["amplituda", "czasTrwania", "przesuniecie", "samplingrate"],
            "Sygnał sinusoidalny": ["amplituda", "czasTrwania", "przesuniecie", "samplingrate", "okres"],
            "Sygnał sinusoidalny wyprostowany jednopołówkowo": ["amplituda", "czasTrwania", "przesuniecie", "samplingrate", "okres"],
            "Sygnał sinusoidalny wyprostowany dwupołówkowo": ["amplituda", "czasTrwania", "przesuniecie", "samplingrate", "okres"],
            "Sygnał prostokątny": ["amplituda", "czasTrwania", "przesuniecie", "samplingrate", "okres", "wypelnienie"],
            "Sygnał prostokątny symetryczny": ["amplituda", "czasTrwania", "przesuniecie", "samplingrate", "okres", "wypelnienie"],
            "Sygnał trójkątny": ["amplituda", "czasTrwania", "przesuniecie", "samplingrate", "okres", "wypelnienie"],
            "Skok jednostkowy": ["amplituda", "czasTrwania", "przesuniecie", "samplingrate"],
            "Impuls jednostkowy": ["amplituda", "czasTrwania", "przesuniecie", "samplingrate", "numerProbki"],
            "Szum impulsowy": ["amplituda", "czasTrwania", "przesuniecie", "samplingrate", "prawdopodobienstwo"]
        }

        needed_params = param_mapping.get(signal_type, [])

        self.amplitudaLineEdit.setEnabled("amplituda" in needed_params)
        self.czasTrwaniaLineEdit.setEnabled("czasTrwania" in needed_params)
        self.przesuniecieLineEdit.setEnabled("przesuniecie" in needed_params)
        self.samplingrateLineEdit.setEnabled("samplingrate" in needed_params)
        self.okresLineEdit.setEnabled("okres" in needed_params)
        self.wypelnienieLineEdit.setEnabled("wypelnienie" in needed_params)
        self.numerProbkiLineEdit.setEnabled("numerProbki" in needed_params)
        self.prawdopodobienstwoLineEdit.setEnabled("prawdopodobienstwo" in needed_params)

        if not self.amplitudaLineEdit.isEnabled():
            self.amplitudaLineEdit.clear()
        if not self.czasTrwaniaLineEdit.isEnabled():
            self.czasTrwaniaLineEdit.clear()
        if not self.przesuniecieLineEdit.isEnabled():
            self.przesuniecieLineEdit.clear()
        if not self.samplingrateLineEdit.isEnabled():
            self.samplingrateLineEdit.clear()
        if not self.okresLineEdit.isEnabled():
            self.okresLineEdit.clear()
        if not self.wypelnienieLineEdit.isEnabled():
            self.wypelnienieLineEdit.clear()
        if not self.numerProbkiLineEdit.isEnabled():
            self.numerProbkiLineEdit.clear()
        if not self.prawdopodobienstwoLineEdit.isEnabled():
            self.prawdopodobienstwoLineEdit.clear()

    def setup_operations_frames(self):
        self.op_plot_layout1 = QtWidgets.QVBoxLayout(self.op_framesig1)
        self.figure_signal1 = Figure(figsize=(8, 3))
        self.canvas_signal1 = FigureCanvas(self.figure_signal1)
        self.op_plot_layout1.addWidget(self.canvas_signal1)

        self.op_plot_layout2 = QtWidgets.QVBoxLayout(self.op_framesig2)
        self.figure_signal2 = Figure(figsize=(8, 3))
        self.canvas_signal2 = FigureCanvas(self.figure_signal2)
        self.op_plot_layout2.addWidget(self.canvas_signal2)

        self.op_plot_layout_result = QtWidgets.QVBoxLayout(self.op_frameop)
        self.figure_result = Figure(figsize=(8, 3))
        self.canvas_result = FigureCanvas(self.figure_result)
        self.op_plot_layout_result.addWidget(self.canvas_result)

        self.signal1 = None
        self.signal2 = None
        self.result_signal = None

    def set_default_values(self):
        self.amplitudaLineEdit.setText("1")
        self.czasTrwaniaLineEdit.setText("2")
        self.przesuniecieLineEdit.setText("0")
        self.samplingrateLineEdit.setText("1000")
        self.okresLineEdit.setText("1")
        self.wypelnienieLineEdit.setText("0.5")
        self.numerProbkiLineEdit.setText("10")
        self.prawdopodobienstwoLineEdit.setText("0.5")
        self.sig_histbin.setText("20")

        self.op_czasTrwaniaLineEdit1.setText("2")
        self.op_przesuniecieLineEdit1.setText("0")
        self.op_samplingrateLineEdit1.setText("1000")
        
        self.amplitudaLineEdit_2.setText("1")
        self.okresLineEdit_2.setText("1")
        self.wypelnienieLineEdit_2.setText("0.5")
        self.numerProbkiLineEdit_2.setText("10")
        self.prawdopodobienstwoLineEdit_2.setText("0.5")
        
        self.amplitudaLineEdit_3.setText("1")
        self.okresLineEdit_3.setText("1")
        self.wypelnienieLineEdit_3.setText("0.5")
        self.numerProbkiLineEdit_3.setText("10")
        self.prawdopodobienstwoLineEdit_3.setText("0.5")

    def update_enabled_fields_signal1(self):
        signal_type = self.comboBoxSignals_2.currentText()
        
        param_mapping = {
            "Szum o rozkładzie jednostajnym": ["amplituda"],
            "Szum gaussowski": ["amplituda"],
            "Sygnał sinusoidalny": ["amplituda", "okres"],
            "Sygnał sinusoidalny wyprostowany jednopołówkowo": ["amplituda", "okres"],
            "Sygnał sinusoidalny wyprostowany dwupołówkowo": ["amplituda", "okres"],
            "Sygnał prostokątny": ["amplituda", "okres", "wypelnienie"],
            "Sygnał prostokątny symetryczny": ["amplituda", "okres", "wypelnienie"],
            "Sygnał trójkątny": ["amplituda", "okres", "wypelnienie"],
            "Skok jednostkowy": ["amplituda"],
            "Impuls jednostkowy": ["amplituda", "numerProbki"],
            "Szum impulsowy": ["amplituda", "prawdopodobienstwo"]
        }

        needed_params = param_mapping.get(signal_type, [])

        self.amplitudaLineEdit_2.setEnabled("amplituda" in needed_params)
        self.okresLineEdit_2.setEnabled("okres" in needed_params)
        self.wypelnienieLineEdit_2.setEnabled("wypelnienie" in needed_params)
        self.numerProbkiLineEdit_2.setEnabled("numerProbki" in needed_params)
        self.prawdopodobienstwoLineEdit_2.setEnabled("prawdopodobienstwo" in needed_params)
        
        if not self.amplitudaLineEdit_2.isEnabled():
            self.amplitudaLineEdit_2.clear()
        if not self.okresLineEdit_2.isEnabled():
            self.okresLineEdit_2.clear()
        if not self.wypelnienieLineEdit_2.isEnabled():
            self.wypelnienieLineEdit_2.clear()
        if not self.numerProbkiLineEdit_2.isEnabled():
            self.numerProbkiLineEdit_2.clear()
        if not self.prawdopodobienstwoLineEdit_2.isEnabled():
            self.prawdopodobienstwoLineEdit_2.clear()

    def update_enabled_fields_signal2(self):
        signal_type = self.comboBoxSignals_3.currentText()
        
        param_mapping = {
            "Szum o rozkładzie jednostajnym": ["amplituda"],
            "Szum gaussowski": ["amplituda"],
            "Sygnał sinusoidalny": ["amplituda", "okres"],
            "Sygnał sinusoidalny wyprostowany jednopołówkowo": ["amplituda", "okres"],
            "Sygnał sinusoidalny wyprostowany dwupołówkowo": ["amplituda", "okres"],
            "Sygnał prostokątny": ["amplituda", "okres", "wypelnienie"],
            "Sygnał prostokątny symetryczny": ["amplituda", "okres", "wypelnienie"],
            "Sygnał trójkątny": ["amplituda", "okres", "wypelnienie"],
            "Skok jednostkowy": ["amplituda"],
            "Impuls jednostkowy": ["amplituda", "numerProbki"],
            "Szum impulsowy": ["amplituda", "prawdopodobienstwo"]
        }
        
        needed_params = param_mapping.get(signal_type, [])
        
        self.amplitudaLineEdit_3.setEnabled("amplituda" in needed_params)
        self.okresLineEdit_3.setEnabled("okres" in needed_params)
        self.wypelnienieLineEdit_3.setEnabled("wypelnienie" in needed_params)
        self.numerProbkiLineEdit_3.setEnabled("numerProbki" in needed_params)
        self.prawdopodobienstwoLineEdit_3.setEnabled("prawdopodobienstwo" in needed_params)

        if not self.amplitudaLineEdit_3.isEnabled():
            self.amplitudaLineEdit_3.clear()
        if not self.okresLineEdit_3.isEnabled():
            self.okresLineEdit_3.clear()
        if not self.wypelnienieLineEdit_3.isEnabled():
            self.wypelnienieLineEdit_3.clear()
        if not self.numerProbkiLineEdit_3.isEnabled():
            self.numerProbkiLineEdit_3.clear()
        if not self.prawdopodobienstwoLineEdit_3.isEnabled():
            self.prawdopodobienstwoLineEdit_3.clear()

    def generate_and_plot_signal1(self):
        try:
            duration = float(self.op_czasTrwaniaLineEdit1.text()) if self.op_czasTrwaniaLineEdit1.text() else 2
            t_shift = float(self.op_przesuniecieLineEdit1.text()) if self.op_przesuniecieLineEdit1.text() else 0
            sampling_rate = float(self.op_samplingrateLineEdit1.text()) if self.op_samplingrateLineEdit1.text() else 1000
        except ValueError:
            QtWidgets.QMessageBox.critical(None, "Błąd", "Wprowadź poprawne wartości numeryczne dla parametrów wspólnych.")
            return

        signal_type = self.comboBoxSignals_2.currentText()
        
        try:
            amplitude = float(self.amplitudaLineEdit_2.text()) if self.amplitudaLineEdit_2.text() else 1
            period = float(self.okresLineEdit_2.text()) if self.okresLineEdit_2.text() else 1
            fill_factor = float(self.wypelnienieLineEdit_2.text()) if self.wypelnienieLineEdit_2.text() else 0.5
            sample_num = int(self.numerProbkiLineEdit_2.text()) if self.numerProbkiLineEdit_2.text() else 10
            probability = float(self.prawdopodobienstwoLineEdit_2.text()) if self.prawdopodobienstwoLineEdit_2.text() else 0.5
        except ValueError:
            QtWidgets.QMessageBox.critical(None, "Błąd", "Wprowadź poprawne wartości numeryczne.")
            return

        if signal_type == "Szum o rozkładzie jednostajnym":
            signal_obj = SignalGenerator.uniformly_distributed_noise(A=amplitude, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Szum gaussowski":
            signal_obj = SignalGenerator.gaussian_noise(A=amplitude, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał sinusoidalny":
            signal_obj = SignalGenerator.sin_signal(A=amplitude, T=period, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał sinusoidalny wyprostowany jednopołówkowo":
            signal_obj = SignalGenerator.sin_half_signal(A=amplitude, T=period, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał sinusoidalny wyprostowany dwupołówkowo":
            signal_obj = SignalGenerator.sin_twohalf_signal(A=amplitude, T=period, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał prostokątny":
            signal_obj = SignalGenerator.square_signal(A=amplitude, T=period, kw=fill_factor, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał prostokątny symetryczny":
            signal_obj = SignalGenerator.square_symmetric_signal(A=amplitude, T=period, kw=fill_factor, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał trójkątny":
            signal_obj = SignalGenerator.triangle_signal(A=amplitude, T=period, t_start=t_shift, d=duration, kw=fill_factor, sampling_rate=sampling_rate)
        elif signal_type == "Skok jednostkowy":
            signal_obj = SignalGenerator.step_signal(A=amplitude, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Impuls jednostkowy":
            signal_obj = SignalGenerator.unit_impulse(A=amplitude, n_start=t_shift, n_spike=sample_num, sampling_rate=sampling_rate, d=duration)
        elif signal_type == "Szum impulsowy":
            signal_obj = SignalGenerator.impulse_noise(A=amplitude, t_start=t_shift, d=duration, sampling_rate=sampling_rate, p=probability)
        
        self.signal1 = signal_obj
        
        self.plot_operation_signal(signal_obj, self.figure_signal1, self.canvas_signal1)

    def generate_and_plot_signal2(self):
        try:
            duration = float(self.op_czasTrwaniaLineEdit1.text()) if self.op_czasTrwaniaLineEdit1.text() else 2
            t_shift = float(self.op_przesuniecieLineEdit1.text()) if self.op_przesuniecieLineEdit1.text() else 0
            sampling_rate = float(self.op_samplingrateLineEdit1.text()) if self.op_samplingrateLineEdit1.text() else 1000
        except ValueError:
            QtWidgets.QMessageBox.critical(None, "Błąd", "Wprowadź poprawne wartości numeryczne dla parametrów wspólnych.")
            return

        signal_type = self.comboBoxSignals_3.currentText()
        
        try:
            amplitude = float(self.amplitudaLineEdit_3.text()) if self.amplitudaLineEdit_3.text() else 1
            period = float(self.okresLineEdit_3.text()) if self.okresLineEdit_3.text() else 1
            fill_factor = float(self.wypelnienieLineEdit_3.text()) if self.wypelnienieLineEdit_3.text() else 0.5
            sample_num = int(self.numerProbkiLineEdit_3.text()) if self.numerProbkiLineEdit_3.text() else 10
            probability = float(self.prawdopodobienstwoLineEdit_3.text()) if self.prawdopodobienstwoLineEdit_3.text() else 0.5
        except ValueError:
            QtWidgets.QMessageBox.critical(None, "Błąd", "Wprowadź poprawne wartości numeryczne.")
            return
        
        if signal_type == "Szum o rozkładzie jednostajnym":
            signal_obj = SignalGenerator.uniformly_distributed_noise(A=amplitude, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Szum gaussowski":
            signal_obj = SignalGenerator.gaussian_noise(A=amplitude, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał sinusoidalny":
            signal_obj = SignalGenerator.sin_signal(A=amplitude, T=period, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał sinusoidalny wyprostowany jednopołówkowo":
            signal_obj = SignalGenerator.sin_half_signal(A=amplitude, T=period, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał sinusoidalny wyprostowany dwupołówkowo":
            signal_obj = SignalGenerator.sin_twohalf_signal(A=amplitude, T=period, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał prostokątny":
            signal_obj = SignalGenerator.square_signal(A=amplitude, T=period, kw=fill_factor, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał prostokątny symetryczny":
            signal_obj = SignalGenerator.square_symmetric_signal(A=amplitude, T=period, kw=fill_factor, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Sygnał trójkątny":
            signal_obj = SignalGenerator.triangle_signal(A=amplitude, T=period, t_start=t_shift, d=duration, kw=fill_factor, sampling_rate=sampling_rate)
        elif signal_type == "Skok jednostkowy":
            signal_obj = SignalGenerator.step_signal(A=amplitude, t_start=t_shift, d=duration, sampling_rate=sampling_rate)
        elif signal_type == "Impuls jednostkowy":
            signal_obj = SignalGenerator.unit_impulse(A=amplitude, n_start=t_shift, n_spike=sample_num, sampling_rate=sampling_rate, d=duration)
        elif signal_type == "Szum impulsowy":
            signal_obj = SignalGenerator.impulse_noise(A=amplitude, t_start=t_shift, d=duration, sampling_rate=sampling_rate, p=probability)
        
        self.signal2 = signal_obj
        
        self.plot_operation_signal(signal_obj, self.figure_signal2, self.canvas_signal2)

    def plot_operation_signal(self, signal_obj, figure, canvas):
        if not signal_obj:
            return

        figure.clear()

        from matplotlib import gridspec
        gs = gridspec.GridSpec(1, 2, width_ratios=[2, 1]) 
        
        ax1 = figure.add_subplot(gs[0]) 

        ax1.grid(True)
        ax1.axhline(y=0, color='k', linewidth=1.5, alpha=0.3)
        
        if signal_obj.discrete_signal:
            ax1.scatter(signal_obj.time, signal_obj.signal)
        else:
            ax1.plot(signal_obj.time, signal_obj.signal)
        
        ax1.set_xlabel("Czas [s]")
        ax1.set_ylabel("Amplituda")
        ax1.set_title("Sygnał")

        stats_text = "Statystyki:\n\n"
        stats_text += f"Średnia: {signal_obj.mean_value:.4f}\n"
        stats_text += f"Średnia |x|: {signal_obj.abs_mean_value:.4f}\n"
        stats_text += f"RMS: {signal_obj.rms_value:.4f}\n"
        stats_text += f"Wariancja: {signal_obj.variance:.4f}\n"
        stats_text += f"Moc: {signal_obj.avg_power:.4f}"

        stats_ax = figure.add_subplot(gs[1])
        stats_ax.axis('off') 
        stats_ax.text(0.05, 0.5, stats_text, 
                    va='center', ha='left',
                    bbox=dict(boxstyle='round', facecolor='whitesmoke', alpha=0.5))
        

        figure.tight_layout()
        canvas.draw()

    def execute_operation(self):
        if not hasattr(self, 'signal1') or self.signal1 is None:
            QtWidgets.QMessageBox.warning(None, "Brak sygnału 1", "Wygeneruj lub wczytaj sygnał 1.")
            return
        
        if not hasattr(self, 'signal2') or self.signal2 is None:
            QtWidgets.QMessageBox.warning(None, "Brak sygnału 2", "Wygeneruj lub wczytaj sygnał 2.")
            return
        
        operation = self.comboBox.currentText()

        if operation == "Dodawanie":
            result = SignalOperations.add_signals(self.signal1, self.signal2)
        elif operation == "Odejmowanie":
            result = SignalOperations.subtract_signals(self.signal1, self.signal2)
        elif operation == "Mnożenie":
            result = SignalOperations.multiply_signals(self.signal1, self.signal2)
        elif operation == "Dzielenie":
            result = SignalOperations.divide_signals(self.signal1, self.signal2)
        else:
            QtWidgets.QMessageBox.critical(None, "Błąd", "Nieznana operacja.")
            return
        
        self.result_signal = result
        
        self.plot_result_signal(result)

    def plot_result_signal(self, signal_obj):
        """Plot the result signal from an operation"""
        if not signal_obj:
            return

        self.figure_result.clear()

        from matplotlib import gridspec
        gs = gridspec.GridSpec(1, 3, width_ratios=[2, 2, 1])

        ax1 = self.figure_result.add_subplot(gs[0])
        ax2 = self.figure_result.add_subplot(gs[1])

        ax1.grid(True)
        ax1.axhline(y=0, color='k', linewidth=1.5, alpha=0.3)
        
        if signal_obj.discrete_signal:
            ax1.scatter(signal_obj.time, signal_obj.signal)
        else:
            ax1.plot(signal_obj.time, signal_obj.signal)
        
        ax1.set_xlabel("Czas [s]")
        ax1.set_ylabel("Amplituda")
        ax1.set_title("Wynik operacji")

        try:
            bins = 20 
            ax2.hist(signal_obj.signal, bins=bins)
            ax2.set_title("Histogram")
            ax2.set_xlabel("Amplituda")
            ax2.set_ylabel("Częstość")
        except Exception:
            pass
        
        stats_text = "Statystyki:\n\n"
        stats_text += f"Średnia: {signal_obj.mean_value:.4f}\n"
        stats_text += f"Średnia |x|: {signal_obj.abs_mean_value:.4f}\n"
        stats_text += f"RMS: {signal_obj.rms_value:.4f}\n"
        stats_text += f"Wariancja: {signal_obj.variance:.4f}\n"
        stats_text += f"Moc: {signal_obj.avg_power:.4f}"
        
        stats_ax = self.figure_result.add_subplot(gs[2])
        stats_ax.axis('off')
        stats_ax.text(0.05, 0.5, stats_text, 
                    va='center', ha='left',
                    bbox=dict(boxstyle='round', facecolor='whitesmoke', alpha=0.5))
        

        self.figure_result.tight_layout()
        self.canvas_result.draw()

    def save_signal1(self):
        if not hasattr(self, 'signal1') or self.signal1 is None:
            QtWidgets.QMessageBox.warning(None, "Ostrzeżenie", "Brak sygnału 1 do zapisania.")
            return
        
        self._save_signal_to_file(self.signal1)

    def save_signal2(self):
        if not hasattr(self, 'signal2') or self.signal2 is None:
            QtWidgets.QMessageBox.warning(None, "Ostrzeżenie", "Brak sygnału 2 do zapisania.")
            return
        
        self._save_signal_to_file(self.signal2)

    def save_operation_result(self):
        if not hasattr(self, 'result_signal') or self.result_signal is None:
            QtWidgets.QMessageBox.warning(None, "Ostrzeżenie", "Brak sygnału wynikowego do zapisania.")
            return
        
        self._save_signal_to_file(self.result_signal)

    def _save_signal_to_file(self, signal_obj):
        options = QtWidgets.QFileDialog.Options()
        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(
            None, "Zapisz sygnał", "", "Pickle Files (*.pkl);;All Files (*)", 
            options=options
        )
        
        if file_path:
            if not file_path.endswith('.pkl'):
                file_path += '.pkl'
                
            import pickle
            try:
                with open(file_path, 'wb') as f:
                    pickle.dump(signal_obj, f)
                QtWidgets.QMessageBox.information(None, "Sukces", f"Sygnał zapisany do {file_path}")
            except Exception as e:
                QtWidgets.QMessageBox.critical(None, "Błąd", f"Nie udało się zapisać pliku: {str(e)}")

    def load_signal1(self):
        signal_obj = self._load_signal_from_file()
        if signal_obj:
            self.signal1 = signal_obj
            self.plot_operation_signal(signal_obj, self.figure_signal1, self.canvas_signal1)

    def load_signal2(self):
        signal_obj = self._load_signal_from_file()
        if signal_obj:
            self.signal2 = signal_obj
            self.plot_operation_signal(signal_obj, self.figure_signal2, self.canvas_signal2)

    def _load_signal_from_file(self):
        options = QtWidgets.QFileDialog.Options()
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            None, "Wczytaj sygnał", "", "Pickle Files (*.pkl);;All Files (*)", 
            options=options
        )
        
        if file_path:
            import pickle
            try:
                with open(file_path, 'rb') as f:
                    signal_obj = pickle.load(f)

                if not isinstance(signal_obj, SignalObject):
                    QtWidgets.QMessageBox.critical(None, "Błąd", "Plik nie zawiera obiektu sygnału.")
                    return None
                    
                QtWidgets.QMessageBox.information(None, "Sukces", f"Sygnał wczytany z {file_path}")
                return signal_obj
            except Exception as e:
                QtWidgets.QMessageBox.critical(None, "Błąd", f"Nie udało się wczytać pliku: {str(e)}")
                return None
        
        return None

    def setup_file_frame(self):

        self.f_plot_layout = QtWidgets.QVBoxLayout(self.f_frame)
        
        self.file_figure = Figure(figsize=(9, 4))

        self.file_canvas = FigureCanvas(self.file_figure)
        self.f_plot_layout.addWidget(self.file_canvas)

        self.file_figure.clear()
        self.file_canvas.draw()

        self.file_signal = None

        self.f_sigattr.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.f_sigattr.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        
        self.f_sigvalues.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.f_sigvalues.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)

        self.f_sigattr.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        self.f_sigattr.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)
        
        self.f_sigvalues.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        self.f_sigvalues.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)
        self.f_sigvalues.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.Stretch)

    def load_file_signal(self):
        options = QtWidgets.QFileDialog.Options()
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            None, "Wczytaj sygnał", "", "Pickle Files (*.pkl);;All Files (*)", 
            options=options
        )
        
        if file_path:
            try:
                from filesRW import FileRW
                
                signal_obj = FileRW.read_signal_from_file(file_path)
                
                if signal_obj:
                    self.file_signal = signal_obj
                    
                    self.display_signal_attributes(signal_obj)
                    self.display_signal_values(signal_obj)
                    
                    self.plot_file_signal()
                    
                    QtWidgets.QMessageBox.information(None, "Sukces", f"Sygnał wczytany z {file_path}")
                else:
                    QtWidgets.QMessageBox.critical(None, "Błąd", f"Nie udało się wczytać sygnału z pliku: {file_path}")
            except Exception as e:
                QtWidgets.QMessageBox.critical(None, "Błąd", f"Nie udało się wczytać pliku: {str(e)}")

    def display_signal_attributes(self, signal_obj):
        attr_name_mapping = {
            'A': 'Amplituda',
            'T': 'Okres [s]',
            'd': 'Czas trwania [s]',
            't_start': 'Przesunięcie czasowe [s]',
            'sampling_rate': 'Częstotliwość próbkowania [próbki/s]',
            'kw': 'Współczynnik wypełnienia',
            'n_start': 'Początkowy indeks',
            'n_spike': 'Numer próbki impulsu',
            'p': 'Prawdopodobieństwo',
            'discrete_signal': 'Sygnał dyskretny',
            'mean_value': 'Wartość średnia',
            'abs_mean_value': 'Średnia wartość bezwzględna',
            'rms_value': 'Wartość skuteczna (RMS)',
            'variance': 'Wariancja',
            'avg_power': 'Średnia moc sygnału'
        }
        
        self.f_sigattr.setRowCount(0)

        valid_attributes = []
        for attr_name in dir(signal_obj):
            if (attr_name.startswith('_') or 
                callable(getattr(signal_obj, attr_name)) or 
                attr_name in ['signal', 'time']):
                continue
            
            attr_value = getattr(signal_obj, attr_name)

            if attr_value is None:
                continue

            display_name = attr_name_mapping.get(attr_name, attr_name)

            if isinstance(attr_value, bool):
                value_str = "Tak" if attr_value else "Nie"
            elif isinstance(attr_value, (int, float)):
                value_str = f"{attr_value:.6g}"
            else:
                value_str = str(attr_value)

            valid_attributes.append((display_name, value_str))

        valid_attributes.sort(key=lambda x: x[0])

        self.f_sigattr.setRowCount(len(valid_attributes))
        for i, (name, value) in enumerate(valid_attributes):
            name_item = QtWidgets.QTableWidgetItem(name)
            value_item = QtWidgets.QTableWidgetItem(value)

            name_item.setFlags(name_item.flags() & ~QtCore.Qt.ItemIsEditable)
            value_item.setFlags(value_item.flags() & ~QtCore.Qt.ItemIsEditable)
            
            self.f_sigattr.setItem(i, 0, name_item)
            self.f_sigattr.setItem(i, 1, value_item)

        self.f_sigattr.resizeColumnsToContents()

    def display_signal_values(self, signal_obj):

        self.f_sigvalues.setRowCount(0)

        show_samples = len(signal_obj.signal)
        
        self.f_sigvalues.setRowCount(show_samples)
        
        for i in range(show_samples):
            index_item = QtWidgets.QTableWidgetItem(str(i))
            time_item = QtWidgets.QTableWidgetItem(f"{signal_obj.time[i]:.6f}")
            value_item = QtWidgets.QTableWidgetItem(f"{signal_obj.signal[i]:.6f}")
            
            index_item.setFlags(index_item.flags() & ~QtCore.Qt.ItemIsEditable)
            time_item.setFlags(time_item.flags() & ~QtCore.Qt.ItemIsEditable)
            value_item.setFlags(value_item.flags() & ~QtCore.Qt.ItemIsEditable)

            time_item.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
            value_item.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)

            self.f_sigvalues.setItem(i, 0, index_item)
            self.f_sigvalues.setItem(i, 1, time_item)
            self.f_sigvalues.setItem(i, 2, value_item)

        self.f_sigvalues.resizeColumnsToContents()

    def plot_file_signal(self):
        if not hasattr(self, 'file_signal') or self.file_signal is None:
            return

        signal_obj = self.file_signal

        try:
            bins = int(self.f_histbin.text()) if self.f_histbin.text() else 20
        except ValueError:
            bins = 20

        self.file_figure.clear()
        
        from matplotlib import gridspec
        gs = gridspec.GridSpec(1, 3, width_ratios=[3, 3, 0.5])
        
        ax1 = self.file_figure.add_subplot(gs[0])
        ax2 = self.file_figure.add_subplot(gs[1])

        ax1.grid(True)
        ax1.axhline(y=0, color='k', linewidth=1.5, alpha=0.3)
        
        if signal_obj.discrete_signal:
            ax1.scatter(signal_obj.time, signal_obj.signal)
        else:
            ax1.plot(signal_obj.time, signal_obj.signal)
        
        ax1.set_xlabel("Czas [s]")
        ax1.set_ylabel("Amplituda")
        ax1.set_title("Sygnał")

        ax2.hist(signal_obj.signal, bins=bins)
        ax2.set_title("Histogram")
        ax2.set_xlabel("Amplituda")
        ax2.set_ylabel("Częstość")
        
        stats_text = "Statystyki sygnału:\n\n"
        stats_text += f"Wartość średnia:\n{signal_obj.mean_value:.4f}\n\n"
        stats_text += f"Średnia wartość bezwzględna:\n{signal_obj.abs_mean_value:.4f}\n\n"
        stats_text += f"Wartość skuteczna (RMS):\n{signal_obj.rms_value:.4f}\n\n"
        stats_text += f"Wariancja:\n{signal_obj.variance:.4f}\n\n"
        stats_text += f"Średnia moc sygnału:\n{signal_obj.avg_power:.4f}"

        stats_ax = self.file_figure.add_subplot(gs[2])
        stats_ax.axis('off')
        stats_ax.text(0.05, 0.5, stats_text, 
                    va='center', ha='left',
                    bbox=dict(boxstyle='round', facecolor='whitesmoke', alpha=0.5))

        self.file_figure.tight_layout()
        self.file_canvas.draw()

    def refresh_file_plot(self):
        if not hasattr(self, 'file_signal') or self.file_signal is None:
            QtWidgets.QMessageBox.warning(None, "Ostrzeżenie", "Brak sygnału do wyświetlenia.")
            return
        
        self.plot_file_signal()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    SignalProcessApp = QtWidgets.QMainWindow()
    ui = SignalProcessApp()
    ui.setupUi(SignalProcessApp)
    SignalProcessApp.show()
    sys.exit(app.exec_())
